package algorithmbasic.basicsets.class29;

public class Manacher {
    /**
     * manacher算法是干嘛的：给我一个字符串返回最大回文子串的长度
     *
     * /**
     * 思路：我想采用由中间向两边阔的形式来判断当前位置回文字串的长度。但是奇数回文字串采取这样的方式是可以的，但是偶数长度的时候就不可以了。
     * (1,2,3,2,1) right (1,2,2,1) error
     * 为了使我这个想法对偶数也适用，就采取了对当前的字串进行一个预处理。1 2 3 2 1 -> # 1 # 2 # 3 # 2 # 1 #
     * 1 2 2 1 -> # 1 # 2 # 2 # 1 #
     * 为什么采用这样的预处理办法：这样即使是偶数长度也可以采用两边阔的方法进行回文长度的判断。第一个：最大回文半径由3 -> 6  第二个：回文长度由2->5
     * 对预处理后的半径进行模2就得到正确的答案。
     *
     * 引入R 与 C。  R -> 最大右边界， C -> 最大右边界所对应的回文中心的下标。
     * 为什么引入最大右边界 -> 后面就知道她的用处了。
     *
     * 假设我现在来到了i位置，判断一下 i 与 R 的位置关系
     * -> R < I ：采用暴力的方法计算当前位置的最大回文字串半径(由中间向两边阔，一个一个的判断)
     * -> R >=I : i'(i' i相对)的回文半径在L(RL相对)内：此时
     *            i'的回文半径在L外：
     *            i'的回文半径正好在L上：
     */
    public static int manacher(String s) {

    }
}
